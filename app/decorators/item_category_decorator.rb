class ItemCategoryDecorator < ApplicationDecorator
  decorates :item_category

  def workspace_name
    model.coworking_spaces.first.try(:name) || 'Espacio'#Nombre por defecto para los espacios
  end

  def city
    model.coworking_spaces.first.try(:city).try(:name) || 'Cali'#Ciudad por defecto para los espacios
  end

  def price
    "$#{model.offered_price.to_i}"
  end

  def savings
    "$#{(model.discount_percentage.nan? ? 0 : model.normal_price - model.offered_price).to_i}"

  end

  def discount_percentage
    model.discount_percentage.nan? ? '0%' : "#{model.discount_percentage.to_i}%"#porcentaje de descuento
  end

  def redirection_url
    model.target_url || h.coworking_space_url(model.coworking_spaces.first.id)#"http://www.meetrico.com/coworking_spaces/#{model.coworking_spaces.first.id rescue nil}"
  end

  def mutable_price(coworking_space)
    model.price(coworking_space)
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
